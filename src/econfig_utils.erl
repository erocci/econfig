%%% @author Jean Parpaillon <jean.parpaillon@free.fr>
%%% @copyright (C) 2015, Jean Parpaillon
%%% @doc
%%%
%%% @end
%%% Created :  7 Aug 2015 by Jean Parpaillon <jean.parpaillon@free.fr>

-module(econfig_utils).

-include("econfig_log.hrl").

-export([mktemp/1,
	 system_tmpdir/0,
	 gen/3,
	 cmd/1,
	 cmd/2,
	 pp_timestamp/0,
	 parse_key/2]).


mktemp(Template) ->
    TmpDir = system_tmpdir(),
    mktemp_(TmpDir, Template).


system_tmpdir() ->
    case erlang:system_info(system_architecture) of
	"win32" ->
	    "./tmp";
	_SysArch ->
	    "/tmp"
    end.


-spec pp_timestamp() -> string().
pp_timestamp() ->
    {{Y,M,D},{H,Min,S}} = calendar:now_to_universal_time(erlang:timestamp()),
    io_lib:format("~b-~2..0b-~2..0b ~2..0b:~2..0b:~2..0b", [Y,M,D,H,Min,S]).


-spec gen(Ecfg :: econfig_state:t(), Target :: filename:file(), Tmpl :: filename:file()) -> ok | {error, term()}.
gen(Ecfg, Target, Tmpl) ->
    case filelib:is_regular(Tmpl) of
	true ->
	    case econfig_state:load(Ecfg) of
		{error, _} -> ok;
		Ecfg2 ->
		    Config = econfig_state:config(Ecfg2),
		    Bin = bbmustache:compile(bbmustache:parse_file(Tmpl), econfig_config:hash(Config)),
		    write(Target, Bin)
	    end;
	false ->
	    {error, {notfound, Tmpl}}
    end.


-spec cmd(Cmd :: string()) -> {ok, string()} | {error, term()}.
cmd(Cmd) ->
    cmd(Cmd, 5000).


-spec cmd(Cmd :: string(), Timeout :: integer()) -> {ok, string()} | {error, term()}.
cmd(Cmd, Timeout) ->
    Port = erlang:open_port({spawn, Cmd}, [exit_status]),
    loop_cmd(Port, [], Timeout).


parse_key(App, Key) when is_atom(Key) ->
    parse_key(App, atom_to_list(Key));
parse_key(undefined, Key) when is_atom(Key) ->
    case string:tokens(Key, ".") of
	[App, Key] ->
	    {list_to_atom(App), list_to_atom(Key)};
	_ ->
	    throw({invalid_key, Key})
    end;
parse_key(App, Key) when is_atom(App) ->
    {App, list_to_atom(Key)};
parse_key(_App, _Key) ->
    throw({invalid_key, {_App, _Key}}).

%%
%% Priv
%%
mktemp_(TmpDir, Template) ->
    TmpFile = filename:join([TmpDir, Template ++ io_lib:format(".~p", [erlang:phash2(make_ref())])]),
    case filelib:is_regular(TmpFile) of
	false -> 
	    ok = file:write_file(TmpFile, []),
	    TmpFile;
	true ->
	    mktemp_(TmpDir, Template)
    end.

write(Filename, Data) ->
    Data2 = [ "%%%\n",
	      "%%% Generated by econfig on ", pp_timestamp(), "\n"
	      "%%%\n",
	      Data ],
    file:write_file(Filename, Data2).

loop_cmd(Port, Data, Timeout) ->
    receive
	{Port, {data, NewData}} ->
	    loop_cmd(Port, Data ++ NewData, Timeout);
	{Port, {exit_status, 0}} ->
	    {ok, Data};
	{Port, {exit_status, N}} ->
	    {error, {status, N}}
    after Timeout ->
	    {error, timeout}
    end.
